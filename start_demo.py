#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import asyncio
import sys
import os
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot.demo_reminder import DemoReminderSystem

async def run_demo(interval_minutes: int = 15, duration_hours: int = None):
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    print(f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_minutes} –º–∏–Ω—É—Ç")
    if duration_hours:
        print(f"‚è±Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å–æ–≤")
    print("üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    demo_system = DemoReminderSystem()
    
    try:
        if duration_hours:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            await asyncio.wait_for(
                demo_system.run_demo_loop(interval_minutes=interval_minutes),
                timeout=duration_hours * 3600
            )
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            await demo_system.run_demo_loop(interval_minutes=interval_minutes)
    except asyncio.TimeoutError:
        print(f"\n‚è∞ –î–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–ø—Ä–æ—à–ª–æ {duration_hours} —á–∞—Å–æ–≤)")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    parser.add_argument(
        "--interval", 
        type=int, 
        default=15, 
        help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 15)"
    )
    parser.add_argument(
        "--duration", 
        type=int, 
        help="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if args.interval < 1:
        print("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã")
        return
    
    if args.duration and args.duration < 1:
        print("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
    asyncio.run(run_demo(args.interval, args.duration))

if __name__ == "__main__":
    main() 