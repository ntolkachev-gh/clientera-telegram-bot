import asyncio
import logging
import nest_asyncio
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database.database import SessionLocal, init_db
from database.models import Client, Session as ChatSession, Message
from bot.openai_client import OpenAIClient
from bot.youclients_api import YouclientsAPI
from config import settings
from typing import Optional

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class SimpleTelegramBot:
    def __init__(self):
        self.application = Application.builder().token(settings.telegram_bot_token).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–ª–æ–Ω–µ
‚Ä¢ üë©‚Äçüíº –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
‚Ä¢ ‚è∞ –ù–∞–π—Ç–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∫ –ù–∞—Ç–∞–ª—å–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:
/services - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
/masters - –Ω–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ø–æ–º–æ—â—å
        """
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üìù **–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥–∏:**
‚Ä¢ "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä"
‚Ä¢ "–ó–∞–ø–∏—à–∏ –º–µ–Ω—è –∫ –ù–∞—Ç–∞–ª—å–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
‚Ä¢ "–ù—É–∂–µ–Ω –ø–µ–¥–∏–∫—é—Ä –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É"

‚ùì **–í–æ–ø—Ä–æ—Å—ã –æ —Å–∞–ª–æ–Ω–µ:**
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞–Ω–∏–∫—é—Ä?"
‚Ä¢ "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —É—Å–ª—É–≥–∏?"
‚Ä¢ "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–ª–æ–Ω?"

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

üìû **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /services - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
‚Ä¢ /masters - –Ω–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, —è –ø–æ–π–º—É! üòä
        """
        await update.message.reply_text(help_text)

    def get_or_create_client(self, telegram_id: str, user_data: dict):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        with SessionLocal() as db:
            client = db.query(Client).filter(Client.telegram_id == telegram_id).first()
            
            if not client:
                client = Client(
                    telegram_id=telegram_id,
                    username=user_data.get("username"),
                    first_name=user_data.get("first_name"),
                    last_name=user_data.get("last_name")
                )
                db.add(client)
                db.commit()
                db.refresh(client)
            
            return client

    async def process_appointment_booking(self, message_text: str, client: Client) -> Optional[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Youclients"""
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å: {message_text}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
            booking_keywords = ['–∑–∞–ø–∏—Å–∞—Ç—å', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å—å', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—à–∏']
            service_keywords = ['–º–∞—Å—Å–∞–∂', '–æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ', '—Å–ø–∞', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–º–∞–Ω–∏–∫—é—Ä', '–ø–µ–¥–∏–∫—é—Ä']
            
            is_booking = any(keyword in message_text.lower() for keyword in booking_keywords)
            has_service = any(keyword in message_text.lower() for keyword in service_keywords)
            
            logger.info(f"is_booking: {is_booking}, has_service: {has_service}")
            
            if is_booking and has_service:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Youclients")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ Youclients
                youclients_api = YouclientsAPI()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª—É–≥—É –ø–æ —Ç–µ–∫—Å—Ç—É
                service_name = None
                if '–º–∞—Å—Å–∞–∂' in message_text.lower():
                    service_name = '–º–∞—Å—Å–∞–∂'
                elif '–æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ' in message_text.lower():
                    service_name = '–æ–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ'
                elif '—Å–ø–∞' in message_text.lower():
                    service_name = '—Å–ø–∞-–ø—Ä–æ—Ü–µ–¥—É—Ä–∞'
                
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service_name}")
                
                if service_name:
                    # –ò—â–µ–º —É—Å–ª—É–≥—É –≤ Youclients
                    logger.info("–ò—â–µ–º —É—Å–ª—É–≥—É –≤ Youclients API")
                    service = await youclients_api.find_service_by_name(service_name)
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —É—Å–ª—É–≥–∞: {service}")
                    
                    if service:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
                        logger.info("–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
                        masters = await youclients_api.get_masters()
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: {len(masters) if masters else 0}")
                        
                        if masters:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
                            master = masters[0]
                            logger.info(f"–í—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä: {master}")
                            
                            # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00
                            tomorrow = datetime.now() + timedelta(days=1)
                            appointment_time = tomorrow.replace(hour=10, minute=0, second=0, microsecond=0)
                            logger.info(f"–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {appointment_time}")
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                            client_data = {
                                "name": f"{client.first_name or ''} {client.last_name or ''}".strip(),
                                "phone": "",  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                                "email": "",
                                "comment": f"–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
                            }
                            
                            logger.info(f"–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏: {client_data}")
                            result = await youclients_api.create_appointment(
                                client_data, 
                                service["id"], 
                                master["id"], 
                                appointment_time
                            )
                            
                            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: {result}")
                            
                            if result.get("success"):
                                return f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ–∑–¥–∞–ª –∑–∞–ø–∏—Å—å –Ω–∞ {service_name} –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00. –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ."
                            else:
                                return f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                        else:
                            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ Youclients")
                    else:
                        logger.warning(f"–£—Å–ª—É–≥–∞ '{service_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Youclients")
                
                return "–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –Ω–∞ –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?"
            
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥—É")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
            return None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user if update.effective_user else None
        message_text = update.message.text if update.message else None
        if not user or not message_text:
            return
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        try:
            user_data = {
                "username": getattr(user, "username", None),
                "first_name": getattr(user, "first_name", None),
                "last_name": getattr(user, "last_name", None)
            }
            client = self.get_or_create_client(str(user.id), user_data)
            with SessionLocal() as db:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î (–æ–±—ä–µ–∫—Ç, –∞ –Ω–µ –∫–æ–ª–æ–Ω–∫—É)
                client_db = db.query(Client).filter(Client.telegram_id == str(user.id)).first()
                if client_db is None:
                    # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º
                    new_client = Client(
                        telegram_id=str(user.id),
                        username=user_data.get("username"),
                        first_name=user_data.get("first_name"),
                        last_name=user_data.get("last_name")
                    )
                    db.add(new_client)
                    db.commit()
                    db.refresh(new_client)
                    client_db = new_client
                if client_db is None:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
                    return
                session = ChatSession(
                    client_id=client_db.id,
                    is_active=True
                )
                db.add(session)
                db.commit()
                db.refresh(session)
                user_message = Message(
                    client_id=client_db.id,
                    session_id=session.id,
                    message_type="user",
                    content=message_text,
                    telegram_message_id=update.message.message_id if update.message else None
                )
                db.add(user_message)
                db.commit()
                openai_client = OpenAIClient(db)
                recent_messages = db.query(Message).filter(
                    Message.client_id == client_db.id
                ).order_by(Message.created_at.desc()).limit(10).all()
                # –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                system_prompt = (
                    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã.\n\n"
                    "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:\n"
                    "1. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã (–Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π).\n"
                    "2. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã, —Å–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ ‚Ä¢.\n"
                    "3. –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —É—Å–ª—É–≥ ‚Äî –≤—ã–≤–æ–¥–∏ –∏—Ö –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.\n"
                    "4. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º.\n"
                    "5. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ ‚Äî —á—ë—Ç–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏, —á—Ç–æ –µ—â—ë —É—Ç–æ—á–Ω–∏—Ç—å.\n\n"
                    "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ –∫–ª–∏–µ–Ω—Ç–µ:\n"
                    f"‚Ä¢ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {client_db.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"‚Ä¢ –õ—é–±–∏–º—ã–µ —É—Å–ª—É–≥–∏: {', '.join(getattr(client_db, 'favorite_services', []) or []) or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                    f"‚Ä¢ –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞: {', '.join(getattr(client_db, 'favorite_masters', []) or []) or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                    f"‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {', '.join(getattr(client_db, 'preferred_time_slots', []) or []) or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
                    "–í—Å–µ–≥–¥–∞ –±—É–¥—å –ø—Ä–∏–≤–µ—Ç–ª–∏–≤ –∏ –ø–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
                )
                messages = [
                    {"role": "system", "content": system_prompt}
                ]
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ recent_messages ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Message
                for msg in reversed(recent_messages):
                    if hasattr(msg, 'message_type') and hasattr(msg, 'content') and isinstance(msg.content, str):
                        if msg.message_type == "user":
                            messages.append({"role": "user", "content": msg.content})
                        elif msg.message_type == "bot":
                            messages.append({"role": "assistant", "content": msg.content})
                messages.append({"role": "user", "content": message_text})
                appointment_response = await self.process_appointment_booking(message_text, client_db)
                if appointment_response:
                    response = appointment_response
                else:
                    cid = getattr(client_db, 'id', None)
                    response = await openai_client.chat_completion(messages, int(cid) if isinstance(cid, int) else None)
                bot_message = Message(
                    client_id=client_db.id if hasattr(client_db, 'id') else None,
                    session_id=session.id,
                    message_type="bot",
                    content=response
                )
                db.add(bot_message)
                db.commit()
                if update.message:
                    await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            if update.message:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.application.run_polling(drop_pending_updates=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleTelegramBot()
    await bot.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise 