import openai
from typing import List, Dict, Any, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from config import settings
from database.models import OpenAIUsageLog, Client

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai.api_key = settings.openai_api_key

# –¶–µ–Ω—ã –Ω–∞ —Ç–æ–∫–µ–Ω—ã (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤)
PRICING = {
    "gpt-4": {"input": 0.03, "output": 0.06},
    "gpt-4-turbo": {"input": 0.01, "output": 0.03},
    "text-embedding-3-small": {"input": 0.0002, "output": 0.0}
}


class OpenAIClient:
    def __init__(self, db: Session):
        self.db = db
        self.client = openai.OpenAI(api_key=settings.openai_api_key)

    def _log_usage(self, client_id: Optional[int], model: str, purpose: str, 
                   prompt_tokens: int, completion_tokens: int, total_tokens: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI API"""
        cost = 0.0
        if model in PRICING:
            cost = (prompt_tokens * PRICING[model]["input"] + 
                   completion_tokens * PRICING[model]["output"]) / 1000
        
        usage_log = OpenAIUsageLog(
            client_id=client_id,
            model=model,
            purpose=purpose,
            prompt_tokens=prompt_tokens,
            completion_tokens=completion_tokens,
            total_tokens=total_tokens,
            cost_usd=cost
        )
        self.db.add(usage_log)
        self.db.commit()

    async def chat_completion(self, messages: List[Dict[str, str]], 
                            client_id: Optional[int] = None, 
                            model: str = "gpt-4") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT –º–æ–¥–µ–ª–∏"""
        try:
            response = self.client.chat.completions.create(
                model=model,
                messages=messages,
                max_tokens=1000,
                temperature=0.7
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage = response.usage
            self._log_usage(
                client_id=client_id,
                model=model,
                purpose="chat",
                prompt_tokens=usage.prompt_tokens,
                completion_tokens=usage.completion_tokens,
                total_tokens=usage.total_tokens
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

    async def extract_facts(self, conversation_history: str, 
                          client_id: Optional[int] = None) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∫–ª–∏–µ–Ω—Ç–æ–º —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
        
        {conversation_history}
        
        –í–µ—Ä–Ω–∏ JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ:
        {{
            "favorite_services": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö —É—Å–ª—É–≥"],
            "favorite_masters": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤"],
            "preferred_time_slots": ["–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏"],
            "custom_notes": {{
                "allergies": "–∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è",
                "preferences": "–æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è",
                "other": "–¥—Ä—É–≥–∞—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            }}
        }}
        
        –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Å—Ç–∞–≤—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.3
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage = response.usage
            self._log_usage(
                client_id=client_id,
                model="gpt-4",
                purpose="fact_extraction",
                prompt_tokens=usage.prompt_tokens,
                completion_tokens=usage.completion_tokens,
                total_tokens=usage.total_tokens
            )
            
            import json
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤: {e}")
            return {}

    async def create_embeddings(self, texts: List[str]) -> List[List[float]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤"""
        try:
            response = self.client.embeddings.create(
                model="text-embedding-3-small",
                input=texts
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            total_tokens = response.usage.total_tokens
            self._log_usage(
                client_id=None,
                model="text-embedding-3-small",
                purpose="embedding",
                prompt_tokens=total_tokens,
                completion_tokens=0,
                total_tokens=total_tokens
            )
            
            return [embedding.embedding for embedding in response.data]
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return []

    async def process_booking_request(self, user_message: str, 
                                    client_profile: Dict[str, Any],
                                    available_services: List[str] | None = None) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥, –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ—Ç—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        services_list_text = ", ".join(available_services) if available_services else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        prompt = f"""
        –ö–ª–∏–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞–ø–∏—Å–∞–ª: "{user_message}"
        
        –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:
        - –õ—é–±–∏–º—ã–µ —É—Å–ª—É–≥–∏: {client_profile.get('favorite_services', [])}
        - –õ—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞: {client_profile.get('favorite_masters', [])}
        - –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {client_profile.get('preferred_time_slots', [])}

        –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ —Å–∞–ª–æ–Ω–∞: {services_list_text}
        
        –í–ê–ñ–ù–û: –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —É—Å–ª—É–≥—É –∏–ª–∏ –≤—Ä–µ–º—è), 
        —Ç–æ intent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "booking". –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:
        - "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–∑–∞–ø–∏—Å—å", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤–∞–º", "—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
        - "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É", "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É"
        - "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è", "–µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è"
        - "—Ö–æ—á—É –ø—Ä–∏–π—Ç–∏", "–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏"
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ –≤–µ—Ä–Ω–∏ JSON:
        {{
            "intent": "booking|question|other",
            "service": "–Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ null",
            "master": "–∏–º—è –º–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ null",
            "preferred_date": "–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ null",
            "preferred_time": "–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ null",
            "confidence": 0.8,
            "needs_clarification": ["—Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å"],
            "response": "–æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É"
        }}
        
        –ï—Å–ª–∏ intent = "booking", —Ç–æ –≤ needs_clarification —É–∫–∞–∂–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å:
        - –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —É—Å–ª—É–≥–∞: "service"
        - –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –º–∞—Å—Ç–µ—Ä: "master" 
        - –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞: "date"
        - –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è: "time"
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=500,
                temperature=0.3
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            usage = response.usage
            self._log_usage(
                client_id=client_profile.get('id'),
                model="gpt-4",
                purpose="booking_analysis",
                prompt_tokens=usage.prompt_tokens,
                completion_tokens=usage.completion_tokens,
                total_tokens=usage.total_tokens
            )
            
            import json
            result = json.loads(response.choices[0].message.content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: '{user_message}' -> intent: {result.get('intent')}")
            
            return result
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: {e}")
            return {
                "intent": "other",
                "confidence": 0.0,
                "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            } 