import asyncio
import logging
import random
from datetime import datetime, timedelta
from typing import List
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy.orm import Session
from database.database import SessionLocal
from database.models import Client
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class DemoReminderSystem:
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)
        self.db = SessionLocal()
        
        # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–º–æ
        self.demo_messages = [
            {
                "text": "üíÖ –ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ —Å–µ–±–µ! –£ –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?",
                "services": ["–º–∞–Ω–∏–∫—é—Ä", "–ø–µ–¥–∏–∫—é—Ä"]
            },
            {
                "text": "‚ú® –ö—Ä–∞—Å–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –∏–ª–∏ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ. –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ –∂–¥—É—Ç –≤–∞—Å!",
                "services": ["—Å—Ç—Ä–∏–∂–∫–∞", "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ"]
            },
            {
                "text": "üå∏ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑! –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–∫–ª–∞–¥–∫–∏ –∏ –º–∞–∫–∏—è–∂–∞. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                "services": ["—É–∫–ª–∞–¥–∫–∞", "–º–∞–∫–∏—è–∂"]
            },
            {
                "text": "üíÜ‚Äç‚ôÄÔ∏è –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ! –ú–∞—Å—Å–∞–∂ –ª–∏—Ü–∞ –∏ SPA-–ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ø–æ–º–æ–≥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!",
                "services": ["–º–∞—Å—Å–∞–∂ –ª–∏—Ü–∞", "SPA"]
            },
            {
                "text": "üé® –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –≤–æ–ª–æ—Å? –ù–∞—à–∏ —Å—Ç–∏–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
                "services": ["–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å—Ç–∏–ª–∏—Å—Ç–∞"]
            },
            {
                "text": "üíá‚Äç‚ôÄÔ∏è –ù–æ–≤–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - –Ω–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –£ –Ω–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏ –∏ —É–∫–ª–∞–¥–∫–∏. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                "services": ["—Å—Ç—Ä–∏–∂–∫–∞", "—É–∫–ª–∞–¥–∫–∞"]
            },
            {
                "text": "üíÖ –ò–¥–µ–∞–ª—å–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä –∑–∞ 60 –º–∏–Ω—É—Ç! –£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10%!",
                "services": ["–º–∞–Ω–∏–∫—é—Ä"]
            },
            {
                "text": "‚ú® –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ª—é–±—É—é —É—Å–ª—É–≥—É —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
                "services": ["–ª—é–±–∞—è —É—Å–ª—É–≥–∞"]
            }
        ]

    async def get_active_clients(self) -> List[Client]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        
        clients = self.db.query(Client).filter(
            Client.created_at >= thirty_days_ago
        ).all()
        
        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –º–∞–ª–æ, –±–µ—Ä–µ–º –≤—Å–µ—Ö
        if len(clients) < 5:
            clients = self.db.query(Client).all()
        
        return clients

    async def send_demo_reminder(self, client: Client) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_template = random.choice(self.demo_messages)
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            client_name = client.first_name or "–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç"
            personalized_text = message_template["text"].replace("–ü—Ä–∏–≤–µ—Ç!", f"–ü—Ä–∏–≤–µ—Ç, {client_name}!")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            call_to_action = "\n\nüí¨ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å–∏
            keyboard = [
                [
                    InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data="demo_booking"),
                    InlineKeyboardButton("üíÖ –£—Å–ª—É–≥–∏", callback_data="demo_services")
                ],
                [
                    InlineKeyboardButton("üë©‚Äçüé® –ú–∞—Å—Ç–µ—Ä–∞", callback_data="demo_masters"),
                    InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="demo_help")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            full_message = personalized_text + call_to_action
            
            await self.bot.send_message(
                chat_id=client.telegram_id,
                text=full_message,
                reply_markup=reply_markup
            )
            
            logger.info(f"–î–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client.telegram_id}: {e}")
            return False

    async def send_demo_reminders_batch(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–∞—Ä—Ç–∏–µ–π"""
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        try:
            clients = await self.get_active_clients()
            
            if not clients:
                logger.warning("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 10 –∑–∞ —Ä–∞–∑)
            selected_clients = random.sample(clients, min(len(clients), 10))
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {len(selected_clients)} –∫–ª–∏–µ–Ω—Ç–∞–º")
            
            success_count = 0
            for client in selected_clients:
                if await self.send_demo_reminder(client):
                    success_count += 1
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (1-3 —Å–µ–∫—É–Ω–¥—ã)
                await asyncio.sleep(random.uniform(1, 3))
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def run_demo_loop(self, interval_minutes: int = 15):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ü–∏–∫–ª–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_minutes} –º–∏–Ω—É—Ç")
        
        while True:
            try:
                await self.send_demo_reminders_batch()
                
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(interval_minutes * 60)
                
            except KeyboardInterrupt:
                logger.info("–î–µ–º–æ-—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ-—Ü–∏–∫–ª–µ: {e}")
                # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(300)
        
        self.db.close()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    demo_system = DemoReminderSystem()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 –º–∏–Ω—É—Ç
    await demo_system.run_demo_loop(interval_minutes=15)


if __name__ == "__main__":
    asyncio.run(main()) 