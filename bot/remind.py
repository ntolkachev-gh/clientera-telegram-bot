import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Optional
from telegram import Bot
from sqlalchemy.orm import Session
from database.database import SessionLocal
from database.models import Client, Appointment
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ReminderSystem:
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)
        self.db = SessionLocal()

    async def get_clients_for_reminder(self) -> List[Client]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        today = datetime.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–∏ –≤ —Å–∞–ª–æ–Ω–µ
        clients = self.db.query(Client).filter(
            Client.last_visit_date.isnot(None)
        ).all()
        
        clients_to_remind = []
        
        for client in clients:
            if client.last_visit_date:
                days_since_visit = (today - client.last_visit_date.date()).days
                remind_after = client.remind_after_days or settings.remind_after_days
                
                if days_since_visit >= remind_after:
                    clients_to_remind.append(client)
        
        return clients_to_remind

    async def send_reminder(self, client: Client) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É"""
        try:
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
            favorite_services = client.favorite_services or []
            favorite_masters = client.favorite_masters or []
            
            message = f"üëã –ü—Ä–∏–≤–µ—Ç, {client.first_name or '–¥–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç'}!\n\n"
            
            if client.last_visit_date:
                days_ago = (datetime.now().date() - client.last_visit_date.date()).days
                message += f"–ü—Ä–æ—à–ª–æ —É–∂–µ {days_ago} –¥–Ω–µ–π —Å –≤–∞—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –∫ –Ω–∞–º.\n"
            
            message += "–í—Ä–µ–º—è –ø–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —Å–µ–±–µ! üíÖ‚ú®\n\n"
            
            # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if favorite_services:
                service_text = ", ".join(favorite_services[:2])
                message += f"–ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {service_text}?\n"
            
            if favorite_masters:
                master_text = ", ".join(favorite_masters[:2])
                message += f"–í–∞—à–∏ –ª—é–±–∏–º—ã–µ –º–∞—Å—Ç–µ—Ä–∞ {master_text} –±—É–¥—É—Ç —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å!\n"
            
            message += "\nüìÖ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\n"
            message += "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏."
            
            await self.bot.send_message(
                chat_id=client.telegram_id,
                text=message
            )
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client.telegram_id}: {e}")
            return False

    async def send_appointment_reminder(self, appointment: Appointment) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏"""
        try:
            client = appointment.client
            appointment_time = appointment.appointment_datetime
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–ø–∏—Å–∏
            tomorrow = datetime.now() + timedelta(days=1)
            if appointment_time.date() == tomorrow.date():
                message = f"üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!\n\n"
                message += f"–ó–∞–≤—Ç—Ä–∞ {appointment_time.strftime('%d.%m.%Y')} –≤ {appointment_time.strftime('%H:%M')}\n"
                message += f"–£—Å–ª—É–≥–∞: {appointment.service_name}\n"
                message += f"–ú–∞—Å—Ç–µ—Ä: {appointment.master_name}\n\n"
                message += "–ñ–¥–µ–º –≤–∞—Å –≤ —Å–∞–ª–æ–Ω–µ! üòä\n"
                message += "–ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∑–∞—Ä–∞–Ω–µ–µ."
                
                await self.bot.send_message(
                    chat_id=client.telegram_id,
                    text=message
                )
                
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {client.telegram_id}")
                return True
            
            return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏: {e}")
            return False

    async def run_reminder_job(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
            clients_to_remind = await self.get_clients_for_reminder()
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(clients_to_remind)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            
            success_count = 0
            for client in clients_to_remind:
                if await self.send_reminder(client):
                    success_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    # (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ last_reminder_date –≤ –º–æ–¥–µ–ª—å Client)
                    
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö
            upcoming_appointments = self.db.query(Appointment).filter(
                Appointment.appointment_datetime >= datetime.now(),
                Appointment.appointment_datetime <= datetime.now() + timedelta(days=1),
                Appointment.status == "scheduled"
            ).all()
            
            appointment_reminders = 0
            for appointment in upcoming_appointments:
                if await self.send_appointment_reminder(appointment):
                    appointment_reminders += 1
                await asyncio.sleep(1)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {appointment_reminders} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        
        finally:
            self.db.close()

    async def send_promotional_message(self, message_text: str, target_clients: Optional[List[Client]] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
        if target_clients is None:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
            target_clients = self.db.query(Client).filter(
                Client.created_at >= datetime.now() - timedelta(days=90)
            ).all()
        
        if target_clients:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è {len(target_clients)} –∫–ª–∏–µ–Ω—Ç–∞–º")
            
            success_count = 0
            for client in target_clients:
                try:
                    await self.bot.send_message(
                        chat_id=client.telegram_id,
                        text=message_text
                    )
                    success_count += 1
                    await asyncio.sleep(0.5)  # –ú–µ–Ω—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–º–æ –∫–ª–∏–µ–Ω—Ç—É {client.telegram_id}: {e}")
            
            logger.info(f"–ü—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count} –∫–ª–∏–µ–Ω—Ç–∞–º")

    async def cleanup_old_sessions(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        from database.models import Session as ChatSession
        
        cutoff_date = datetime.now() - timedelta(days=7)
        
        old_sessions = self.db.query(ChatSession).filter(
            ChatSession.session_end < cutoff_date,
            ChatSession.is_active == False
        ).all()
        
        for session in old_sessions:
            self.db.delete(session)
        
        self.db.commit()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(old_sessions)} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    reminder_system = ReminderSystem()
    await reminder_system.run_reminder_job()


if __name__ == "__main__":
    asyncio.run(main()) 