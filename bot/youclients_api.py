import httpx
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from config import settings

logger = logging.getLogger(__name__)


class YouclientsAPI:
    def __init__(self):
        self.base_url = "https://api.youclients.ru/api/v1"
        self.headers = {
            "Authorization": f"Bearer {settings.youclients_api_key}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        self.company_id = settings.youclients_company_id

    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ API Youclients (–í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û)"""
        url = f"{self.base_url}/{endpoint}"
        
        logger.info(f"üîß Youclients API {method} –∑–∞–ø—Ä–æ—Å (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û): {url}")
        if data:
            logger.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        # –í–†–ï–ú–ï–ù–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ Youclients API –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
        logger.info("üìù –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Youclients")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if method == "GET" and "services" in endpoint:
            return {
                "data": [
                    {"id": 1, "title": "–°—Ç—Ä–∏–∂–∫–∞", "price": 1500, "duration": 60},
                    {"id": 2, "title": "–û–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "price": 3000, "duration": 120},
                    {"id": 3, "title": "–£–∫–ª–∞–¥–∫–∞", "price": 2000, "duration": 90}
                ]
            }
        elif method == "GET" and "staff" in endpoint:
            return {
                "data": [
                    {"id": 1, "name": "–ê–Ω–Ω–∞", "surname": "–ü–µ—Ç—Ä–æ–≤–∞", "specialization": "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä"},
                    {"id": 2, "name": "–ú–∞—Ä–∏—è", "surname": "–ò–≤–∞–Ω–æ–≤–∞", "specialization": "–°—Ç–∏–ª–∏—Å—Ç"}
                ]
            }
        elif method == "POST" and "records" in endpoint:
            logger.info("‚úÖ –ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ (–ª–æ–∫–∞–ª—å–Ω–æ)")
            return {"success": True, "data": {"id": 999, "status": "created"}}
        else:
            return {"data": [], "success": True}
        
        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        """
        async with httpx.AsyncClient() as client:
            try:
                if method == "GET":
                    response = await client.get(url, headers=self.headers)
                elif method == "POST":
                    response = await client.post(url, headers=self.headers, json=data)
                elif method == "PUT":
                    response = await client.put(url, headers=self.headers, json=data)
                elif method == "DELETE":
                    response = await client.delete(url, headers=self.headers)
                
                logger.info(f"Youclients API –æ—Ç–≤–µ—Ç: {response.status_code}")
                logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {response.headers}")
                
                response.raise_for_status()
                response_data = response.json()
                logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response_data}")
                return response_data
                
            except httpx.HTTPError as e:
                logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Youclients: {e}")
                logger.error(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code if hasattr(e, 'response') else 'N/A'}")
                logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {e.response.text if hasattr(e, 'response') else 'N/A'}")
                return {"error": str(e)}
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Youclients: {e}")
                return {"error": str(e)}
        """

    async def get_services(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥"""
        response = await self._make_request("GET", f"company/{self.company_id}/services")
        
        if "error" in response:
            return []
        
        return response.get("data", [])

    async def get_masters(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤"""
        response = await self._make_request("GET", f"company/{self.company_id}/staff")
        
        if "error" in response:
            return []
        
        return response.get("data", [])

    async def get_master_schedule(self, master_id: int, date: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
        response = await self._make_request(
            "GET", 
            f"company/{self.company_id}/staff/{master_id}/schedule/{date}"
        )
        
        if "error" in response:
            return {}
        
        return response.get("data", {})

    async def get_available_slots(self, service_id: int, master_id: int, 
                                date: str, duration: int = 60) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        params = {
            "service_id": service_id,
            "staff_id": master_id,
            "date": date,
            "duration": duration
        }
        
        response = await self._make_request(
            "GET", 
            f"company/{self.company_id}/book_times",
            params
        )
        
        if "error" in response:
            return []
        
        return response.get("data", [])

    async def create_appointment(self, client_data: Dict[str, Any], 
                               service_id: int, master_id: int, 
                               appointment_datetime: datetime) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î)"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –∏ –º–∞—Å—Ç–µ—Ä–µ
        services = await self.get_services()
        masters = await self.get_masters()
        
        service_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
        master_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä"
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        for service in services:
            if service.get("id") == service_id:
                service_name = service.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
                break
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–º—è –º–∞—Å—Ç–µ—Ä–∞
        for master in masters:
            if master.get("id") == master_id:
                master_name = f"{master.get('name', '')} {master.get('surname', '')}".strip()
                break
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Youclients (–∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
        data = {
            "company_id": self.company_id,
            "staff_id": master_id,
            "services": [
                {
                    "id": service_id,
                    "amount": 1
                }
            ],
            "datetime": appointment_datetime.isoformat(),
            "client": {
                "name": client_data.get("name", ""),
                "phone": client_data.get("phone", ""),
                "email": client_data.get("email", "")
            },
            "comment": client_data.get("comment", "")
        }
        
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
        logger.info(f"   üë§ –ö–ª–∏–µ–Ω—Ç: {client_data.get('name', 'N/A')}")
        logger.info(f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client_data.get('phone', 'N/A')}")
        logger.info(f"   üéØ –£—Å–ª—É–≥–∞: {service_name}")
        logger.info(f"   üë©‚Äçüíº –ú–∞—Å—Ç–µ—Ä: {master_name}")
        logger.info(f"   üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è: {appointment_datetime}")
        logger.info(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {client_data.get('comment', 'N/A')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from database.database import get_db
            from database.models import Appointment, Client
            from sqlalchemy.orm import Session as DBSession
            
            db = next(get_db())
            
            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = db.query(Client).filter(
                Client.telegram_id == str(client_data.get("telegram_id"))
            ).first()
            
            if client:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
                appointment = Appointment(
                    client_id=client.id,
                    service_name=service_name,
                    master_name=master_name,
                    appointment_datetime=appointment_datetime,
                    duration_minutes=60,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    status="scheduled"
                )
                
                db.add(appointment)
                db.commit()
                db.refresh(appointment)
                
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î —Å ID: {appointment.id}")
                
            else:
                logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç —Å telegram_id {client_data.get('telegram_id')} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î: {e}")
        
        # –í–†–ï–ú–ï–ù–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Youclients
        logger.warning("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –∫ Youclients API –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω!")
        logger.info("üìù –ó–∞–ø–∏—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ")
        
        return {"success": True, "data": {"id": "local_999", "status": "created_locally"}}
        
        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        """
        response = await self._make_request("POST", f"company/{self.company_id}/records", data)
        
        if "error" in response:
            return {"success": False, "error": response["error"]}
        
        return {"success": True, "data": response.get("data", {})}
        """

    async def get_appointments(self, date_from: str, date_to: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ (–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î)"""
        
        logger.info(f"üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {date_from} - {date_to}")
        
        try:
            from database.database import get_db
            from database.models import Appointment
            from datetime import datetime
            
            db = next(get_db())
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime
            start_date = datetime.strptime(date_from, "%Y-%m-%d")
            end_date = datetime.strptime(date_to, "%Y-%m-%d")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            appointments = db.query(Appointment).filter(
                Appointment.appointment_datetime >= start_date,
                Appointment.appointment_datetime <= end_date
            ).all()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Youclients API
            result = []
            for appointment in appointments:
                result.append({
                    "id": appointment.id,
                    "datetime": appointment.appointment_datetime.isoformat(),
                    "service_name": appointment.service_name,
                    "master_name": appointment.master_name,
                    "status": appointment.status,
                    "created_at": appointment.created_at.isoformat()
                })
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {len(result)}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
            return []
        
        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        """
        params = {
            "date_from": date_from,
            "date_to": date_to
        }
        
        response = await self._make_request(
            "GET", 
            f"company/{self.company_id}/records",
            params
        )
        
        if "error" in response:
            return []
        
        return response.get("data", [])
        """

    async def cancel_appointment(self, appointment_id: int) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ (–≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î)"""
        
        logger.info(f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ —Å ID: {appointment_id}")
        
        try:
            from database.database import get_db
            from database.models import Appointment
            
            db = next(get_db())
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            appointment = db.query(Appointment).filter(Appointment.id == appointment_id).first()
            
            if appointment:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                appointment.status = str("cancelled")
                appointment.updated_at = datetime.utcnow()
                db.commit()
                
                logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {appointment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
                return {"success": True}
            else:
                logger.warning(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID {appointment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
                return {"success": False, "error": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {e}")
            return {"success": False, "error": str(e)}
        
        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        """
        response = await self._make_request(
            "DELETE", 
            f"company/{self.company_id}/records/{appointment_id}"
        )
        
        if "error" in response:
            return {"success": False, "error": response["error"]}
        
        return {"success": True}
        """

    async def find_service_by_name(self, service_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        services = await self.get_services()
        
        for service in services:
            if service_name.lower() in service.get("title", "").lower():
                return service
        
        return None

    async def find_master_by_name(self, master_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏"""
        masters = await self.get_masters()
        
        for master in masters:
            full_name = f"{master.get('name', '')} {master.get('surname', '')}"
            if master_name.lower() in full_name.lower():
                return master
        
        return None

    async def get_next_available_slots(self, service_id: int, master_id: int, 
                                     days_ahead: int = 7) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥"""
        available_slots = []
        
        for i in range(days_ahead):
            date = (datetime.now() + timedelta(days=i)).strftime("%Y-%m-%d")
            slots = await self.get_available_slots(service_id, master_id, date)
            
            for slot in slots:
                slot["date"] = date
                available_slots.append(slot)
        
        return available_slots

    async def format_services_list(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        services = await self.get_services()
        
        if not services:
            return "–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        formatted = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
        for service in services:
            price = service.get("price", 0)
            duration = service.get("duration", 0)
            formatted += f"‚Ä¢ {service.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            formatted += f"  üí∞ {price} —Ä—É–±. | ‚è± {duration} –º–∏–Ω.\n\n"
        
        return formatted

    async def format_masters_list(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        masters = await self.get_masters()
        
        if not masters:
            return "–ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        formatted = "üë©‚Äçüíº –ù–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞:\n\n"
        for master in masters:
            name = f"{master.get('name', '')} {master.get('surname', '')}"
            specialization = master.get('specialization', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞—Å—Ç–µ—Ä')
            formatted += f"‚Ä¢ {name}\n"
            formatted += f"  üéØ {specialization}\n\n"
        
        return formatted 

    async def create_service(self, service_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏"""
        data = {
            "title": service_data.get("title", ""),
            "description": service_data.get("description", ""),
            "price": service_data.get("price", 0),
            "duration": service_data.get("duration", 60),
            "category_id": service_data.get("category_id", None),
            "is_active": service_data.get("is_active", True)
        }
        
        response = await self._make_request("POST", f"company/{self.company_id}/services", data)
        
        if "error" in response:
            return {"success": False, "error": response["error"]}
        
        return {"success": True, "data": response.get("data", {})}

    async def create_master(self, master_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"""
        data = {
            "name": master_data.get("name", ""),
            "surname": master_data.get("surname", ""),
            "phone": master_data.get("phone", ""),
            "email": master_data.get("email", ""),
            "specialization": master_data.get("specialization", ""),
            "is_active": master_data.get("is_active", True),
            "work_schedule": master_data.get("work_schedule", {})
        }
        
        response = await self._make_request("POST", f"company/{self.company_id}/staff", data)
        
        if "error" in response:
            return {"success": False, "error": response["error"]}
        
        return {"success": True, "data": response.get("data", {})}

    async def delete_service(self, service_id: int) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
        response = await self._make_request("DELETE", f"company/{self.company_id}/services/{service_id}")
        
        if "error" in response:
            return {"success": False, "error": response["error"]}
        
        return {"success": True}

    async def delete_master(self, master_id: int) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"""
        response = await self._make_request("DELETE", f"company/{self.company_id}/staff/{master_id}")
        
        if "error" in response:
            return {"success": False, "error": response["error"]}
        
        return {"success": True} 