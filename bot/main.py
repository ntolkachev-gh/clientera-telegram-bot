import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from database.database import SessionLocal, init_db
from bot.dialog_manager import DialogManager
from bot.embedding import KnowledgeBaseManager
from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(settings.telegram_bot_token).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("services", self.services_command))
        self.application.add_handler(CommandHandler("masters", self.masters_command))
        self.application.add_handler(CommandHandler("profile", self.profile_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    def _get_target_message(self, update: Update):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç Message, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∏ –∏–∑ callback_query"""
        if update.message:
            return update.message
        if update.callback_query and update.callback_query.message:
            return update.callback_query.message
        return None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start. –¢–µ–ø–µ—Ä—å –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫."""
        user = update.effective_user
        welcome_message = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏
‚Ä¢ üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∞–ª–æ–Ω–µ
‚Ä¢ üë©‚Äçüíº –í—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
‚Ä¢ ‚è∞ –ù–∞–π—Ç–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä:
"–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä –∫ –ù–∞—Ç–∞–ª—å–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"

–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏:
/services - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
/masters - –Ω–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞
/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –ø–æ–º–æ—â—å
        """
        if update.message:
            await update.message.reply_text(welcome_message)
        else:
            chat_id = update.effective_chat.id if update.effective_chat else None
            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üìù **–ó–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥–∏:**
‚Ä¢ "–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä"
‚Ä¢ "–ó–∞–ø–∏—à–∏ –º–µ–Ω—è –∫ –ù–∞—Ç–∞–ª—å–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 15:00"
‚Ä¢ "–ù—É–∂–µ–Ω –ø–µ–¥–∏–∫—é—Ä –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É"

‚ùì **–í–æ–ø—Ä–æ—Å—ã –æ —Å–∞–ª–æ–Ω–µ:**
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞–Ω–∏–∫—é—Ä?"
‚Ä¢ "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —É—Å–ª—É–≥–∏?"
‚Ä¢ "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–ª–æ–Ω?"

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚Ä¢ /profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

üìû **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /services - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
‚Ä¢ /masters - –Ω–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º, —è –ø–æ–π–º—É! üòä
        """
        if update.message:
            await update.message.reply_text(help_text)
        else:
            chat_id = update.effective_chat.id if update.effective_chat else None
            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=help_text)

    async def services_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /services ‚Äì —Ç–µ–ø–µ—Ä—å –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫"""
        with SessionLocal() as db:
            dialog_manager = DialogManager(db)
            services_text = await dialog_manager.youclients_api.format_services_list()
            if update.message:
                await update.message.reply_text(services_text)
            else:
                chat_id = update.effective_chat.id if update.effective_chat else None
                if chat_id:
                    await context.bot.send_message(chat_id=chat_id, text=services_text)

    async def masters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /masters ‚Äì —Ç–µ–ø–µ—Ä—å –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫"""
        with SessionLocal() as db:
            dialog_manager = DialogManager(db)
            masters_text = await dialog_manager.youclients_api.format_masters_list()
            if update.message:
                await update.message.reply_text(masters_text)
            else:
                chat_id = update.effective_chat.id if update.effective_chat else None
                if chat_id:
                    await context.bot.send_message(chat_id=chat_id, text=masters_text)

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile ‚Äì —Ç–µ–ø–µ—Ä—å –±–µ–∑ inline-–∫–Ω–æ–ø–æ–∫"""
        user = update.effective_user
        with SessionLocal() as db:
            dialog_manager = DialogManager(db)
            client = dialog_manager.get_or_create_client(str(user.id), {
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name
            })
            stats = dialog_manager.get_client_stats(client.id)
            profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**

üì± –ò–º—è: {stats.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats.get('messages_count', 0)}
üîÑ –°–µ—Å—Å–∏–π: {stats.get('sessions_count', 0)}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {stats.get('created_at', '').strftime('%d.%m.%Y') if stats.get('created_at') else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚ù§Ô∏è **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**
‚Ä¢ –£—Å–ª—É–≥–∏: {', '.join(stats.get('favorite_services', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ú–∞—Å—Ç–µ—Ä–∞: {', '.join(stats.get('favorite_masters', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –í—Ä–µ–º—è: {', '.join(stats.get('preferred_time_slots', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üóìÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {stats.get('last_visit', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            """
            if update.message:
                await update.message.reply_text(profile_text)
            else:
                chat_id = update.effective_chat.id if update.effective_chat else None
                if chat_id:
                    await context.bot.send_message(chat_id=chat_id, text=profile_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user if update.effective_user else None
        message_text = update.message.text if update.message else None
        chat_id = update.effective_chat.id if update.effective_chat else None
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        if chat_id is not None:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        if not user or not message_text:
            return
        try:
            with SessionLocal() as db:
                dialog_manager = DialogManager(db)
                user_data = {
                    "username": getattr(user, "username", None),
                    "first_name": getattr(user, "first_name", None),
                    "last_name": getattr(user, "last_name", None)
                }
                response = await dialog_manager.process_message(
                    str(user.id),
                    user_data,
                    message_text,
                    update.message.message_id if update.message else None
                )
                if update.message:
                    await update.message.reply_text(response)
                elif chat_id:
                    await context.bot.send_message(chat_id=chat_id, text=response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            error_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            if update.message:
                await update.message.reply_text(error_text)
            elif chat_id:
                await context.bot.send_message(chat_id=chat_id, text=error_text)

    async def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ asyncio)."""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ü–∏–∫–ª)
        try:
            kb_manager = KnowledgeBaseManager()
            await kb_manager.load_knowledge_base()
            logger.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π, —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤–Ω—É—Ç—Ä–∏)
        await self.application.run_polling(drop_pending_updates=True)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    bot = TelegramBot()
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(bot.run())


if __name__ == "__main__":
    main() 